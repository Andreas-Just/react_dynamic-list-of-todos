{"version":3,"sources":["components/User.tsx","components/TodoCellCompleted.js","components/TodoItem.tsx","components/TodoList.tsx","api/getData.ts","App.tsx","index.tsx"],"names":["User","name","Table","Cell","TodoCellCompleted","compl","negative","positive","Icon","color","TodoItem","id","user","completed","title","Row","warning","textAlign","headers","TodoList","list","useState","todos","sortTodos","active","setActive","isSorted","setSorted","sortList","field","callback","a","b","localeCompare","sortType","sort","reverse","celled","className","selectable","Header","Object","keys","map","header","HeaderCell","key","onClick","Body","todo","API_URL","API_URL_TODOS","API_URL_USERS","getData","Promise","all","fetch","then","response","json","users","find","userId","App","setTodos","isLoaded","setLoaded","isLoading","setLoading","isError","setError","loadData","data","message","Segment","inverted","as","Button","content","size","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc6edc3a.chunk.js","sourcesContent":["import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\ntype PropsUser = User;\n\nconst User: React.FC<PropsUser> = ({ name }) => <Table.Cell>{name}</Table.Cell>;\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Table } from 'semantic-ui-react';\n\nconst TodoCellCompleted = ({ compl }) => (\n  <Table.Cell negative={!compl} positive={compl}>\n    <Icon\n      color={compl ? 'green' : 'red'}\n      name={compl ? 'checkmark' : 'close'}\n    />\n    {compl ? 'Complebitur' : 'In processus'}\n  </Table.Cell>\n);\n\nTodoCellCompleted.propTypes = {\n  compl: PropTypes.bool.isRequired,\n};\n\nexport default TodoCellCompleted;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport User from './User';\nimport TodoCellCompleted from './TodoCellCompleted';\n\ntype PropsTodoItem = Todo;\n\nconst TodoItem: React.FC<PropsTodoItem> = ({ id, user, completed, title }) => (\n  <Table.Row warning>\n    <Table.Cell>{id}</Table.Cell>\n    <User {...user} />\n    <Table.Cell textAlign=\"left\">{title}</Table.Cell>\n    <TodoCellCompleted compl={completed} />\n  </Table.Row>\n);\n\nexport default TodoItem;\n","import React, { useState } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport TodoItem from './TodoItem';\n\ninterface SortButton {\n  [key: string]: string;\n  user: string;\n  title: string;\n  completed: string;\n}\n\nconst headers: SortButton = {\n  id: 'Id',\n  user: 'Person',\n  title: 'Description',\n  completed: 'Completed',\n};\n\ndeclare type MyCallback = (myArgument: string) => (a: Todo, b: Todo) => number;\n\ntype PropsTodoList = {\n  list: Todo[];\n};\n\nconst TodoList: React.FC<PropsTodoList> = ({ list }) => {\n  const [todos, sortTodos] = useState(list);\n  const [active, setActive] = useState('id');\n  const [isSorted, setSorted] = useState(true);\n\n  const sortType: MyCallback = (field) => {\n    switch (typeof list[0][field]) {\n      case 'string':\n        return (a, b) => a[field].localeCompare(b[field]);\n      case 'object':\n        return (a, b) => a[field].name.localeCompare(b[field].name);\n      default:\n        return (a, b) => a[field] - b[field];\n    }\n  };\n\n  const sortList = (field: string) => {\n    const callback = sortType(field);\n\n    if (active !== field) {\n      sortTodos(todos.sort(callback));\n      setActive(field);\n      setSorted(true);\n    } else {\n      isSorted\n        ? sortTodos(todos.reverse())\n        : sortTodos(todos.sort(callback));\n      setSorted(!isSorted);\n    }\n  };\n\n  return (\n    <Table celled className=\"ui purple inverted\" selectable>\n      <Table.Header>\n        <Table.Row>\n          {Object.keys(headers).map(header => (\n            <Table.HeaderCell\n              className=\"table__button\"\n              key={header}\n              onClick={() => sortList(header)}\n            >\n              {headers[header]}\n            </Table.HeaderCell>\n          ))}\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {list.map(todo => <TodoItem key={todo.id} {...todo} />)}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default TodoList;\n","const API_URL = 'https://seialek.github.io/react_dynamic-list-of-todos/api';\nconst API_URL_TODOS = `${API_URL}/todos.json`;\nconst API_URL_USERS = `${API_URL}/users.json`;\n\nexport const getData = async () => {\n  const [todos, users] = await Promise.all([\n    fetch(API_URL_TODOS).then(response => response.json()),\n    fetch(API_URL_USERS).then(response => response.json()),\n  ]);\n\n  return todos.map((todo: Todo) => ({\n    ...todo,\n    user: users.find((user: User) => user.id === todo.userId),\n  }));\n};\n","import React, { useState } from 'react';\nimport { Segment, Header, Button } from 'semantic-ui-react';\nimport TodoList from './components/TodoList';\nimport './App.css';\n\nimport { getData } from './api/getData';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState('');\n\n  const loadData = async () => {\n    setLoading(true);\n\n    try {\n      const data = await getData();\n\n      setTodos(data);\n      setLoading(false);\n      setLoaded(true);\n    } catch (error) {\n      setLoading(false);\n      setError(`Something went wrong! ${error.message}`);\n    }\n  };\n\n  return (\n    <Segment inverted className=\"main\">\n      <Header as=\"h1\" color=\"purple\">\n        Dynamic list of todos\n      </Header>\n      {isLoaded ? (\n        <TodoList list={todos} />\n      ) : (\n        <>\n          <Header as=\"h2\" color=\"yellow\">{isError}</Header>\n          <Button\n            content={isLoading ? 'Loading...' : 'Load TodoList'}\n            color=\"purple\"\n            size=\"big\"\n            onClick={loadData}\n          />\n        </>\n      )}\n    </Segment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}